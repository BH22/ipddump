
/*
 * IpdDump_NewGUI.java
 *
 * Created on 10 Ιουν 2009, 11:50:15 πμ
 */
package gui;

import java.awt.event.ActionEvent;
import org.quaternions.ipddump.tools.*;
import org.quaternions.ipddump.tools.writers.*;
import org.quaternions.ipddump.data.Records.*;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import org.quaternions.ipddump.*;
import org.quaternions.ipddump.data.*;

/**
 *
 * @author Jimmys Daskalakis - jimdaskalakis01@gmail.com
 */
public class IpdDump_NewGUI extends javax.swing.JFrame {

    private String path;
    private String pathString;
    private final String welcomeMsg = "Welcome to IPDdump - http://code.google.com/p/ipddump/";
    private String ClipBoardTemp;
    private String ext;
    private String fileToSave;
    private InteractivePagerBackup database;
    private final int SMStabINDEX;
    private final int ContactstabINDEX;
    private final int CalendartabINDEX;
    private final int CallLogstabINDEX;
    private final int TaskstabINDEX;
    private final int OptionstabINDEX;
    private final int MemostabINDEX;
    final private int SMSWasSentIndex = 0;
    final private int SMSNumberIndex = 1;
    final private int SMSTextIndex = 2;
    final private int SMSSentIndex = 3;
    final private int SMSReceivedIndex = 4;
    private int ActiveTAB;
    private int totalSMS = 0;
    private int[] SMSSelectedRows;
    private int totalContacts = 0;
    private int[] ContactsSelectedRows;
    private int totalCalendar = 0;
    private int[] CalendarSelectedRows;
    private int totalCallLogs = 0;
    private int[] CallLogsSelectedRows;
    private int totalMemos = 0;
    private int[] MemosSelectedRows;
    private int totalTasks = 0;
    private int[] TasksSelectedRows;
    private final int totalOptions = 0;
    private int[] OptionsSelectedRows;
    private final DataViewer viewer;
    private final FileWriters fileWriter = new FileWriters();
    Finder finder;
    private SmsWriters SMS;
    private ContactsWriters Contacts;
    private MemosWriters Memos;
    private TasksWriters Tasks;
    private CallLogsWriters CallLogs;
    private TableModel ContactsDataModel;
    private TableModel MemosDataModel;
    private TableModel TasksDataModel;
    private TableModel SMSDataModel;
    private TableModel CallLogsDataModel;
    private final int ContactsNameIndex = 0;
    private final int ContactsEmailIndex = 1;
    private final int ContactsMobileIndex = 2;
    private final int ContactsWorkIndex = 3;
    private final int ContactsHomeNumberIndex = 4;
    private final int ContactsNotesIndex = 5;
    private final int MemosTitleIndex = 0;
    private final int MemosMemoIndex = 1;
    private final int TaskTitleIndex = 0;
    private final int TaskStatusIndex = 1;
    private final int TaskPriorityIndex = 2;
    private final int TasksDueIndex = 3;
    private final int TasksReminderIndex = 4;
    private final int TasksNotesIndex = 5;
    private final int TasksTimeZoneIndex = 6;
    private final int CallLogsNameIndex = 0;
    private final int CallLogsDateIndex = 1;
    private final int CallLogsStatusIndex = 2;
    private final int CallLogsDurationIndex = 3;
    private boolean resolveNames = true;
    private final String baseName = "gui.resources.IPDdumpAboutBox";
    private final ResourceBundle rb = ResourceBundle.getBundle(baseName, new Locale("en"));

    /** Creates new form IpdDump_NewGUI */
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IpdChooser = new javax.swing.JFileChooser();
        MessageFrame = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemTxt = new javax.swing.JMenuItem();
        jMenuItemXML = new javax.swing.JMenuItem();
        jMenuItemCSV = new javax.swing.JMenuItem();
        jMenuCP = new javax.swing.JMenu();
        jMenuItemCPTXT = new javax.swing.JMenuItem();
        jMenuItemCPXML = new javax.swing.JMenuItem();
        jMenuItemCPCSV = new javax.swing.JMenuItem();
        jMenuSpSMS = new javax.swing.JMenu();
        jMenuItemSelectedSMSTxt = new javax.swing.JMenuItem();
        jMenuItemSelectedSMSXML = new javax.swing.JMenuItem();
        jMenuItemSelectedSMSCSV = new javax.swing.JMenuItem();
        jMenuSpCallLogs = new javax.swing.JMenu();
        jMenuItemSelectedCallLogsText = new javax.swing.JMenuItem();
        jMenuItemSelectedCallLogsXML = new javax.swing.JMenuItem();
        jMenuItemSelectedCallLogsCSV = new javax.swing.JMenuItem();
        mainTabbedPane = new javax.swing.JTabbedPane();
        jPanelSMS = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSMS = new javax.swing.JTable();
        jPanelContacts = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableContacts = new javax.swing.JTable();
        jPanelMemo = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableMemos = new javax.swing.JTable();
        jPanelTasks = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableTasks = new javax.swing.JTable();
        jPanelCallLogs = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableCallLogs = new javax.swing.JTable();
        jPanelCalendar = new javax.swing.JPanel();
        status_label7 = new javax.swing.JLabel();
        jPanelOptions = new javax.swing.JPanel();
        status_label6 = new javax.swing.JLabel();
        status_label = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        ResolveCheckBox = new javax.swing.JCheckBoxMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        IpdChooser.setAcceptAllFileFilterUsed(false);

        javax.swing.GroupLayout MessageFrameLayout = new javax.swing.GroupLayout(MessageFrame.getContentPane());
        MessageFrame.getContentPane().setLayout(MessageFrameLayout);
        MessageFrameLayout.setHorizontalGroup(
            MessageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        MessageFrameLayout.setVerticalGroup(
            MessageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItemTxt.setText("View in PlainText");
        jMenuItemTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTxtActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemTxt);

        jMenuItemXML.setText("View in Xml");
        jMenuItemXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemXMLActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemXML);

        jMenuItemCSV.setText("View in Csv");
        jMenuItemCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCSVActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemCSV);

        jMenuCP.setText("Copy in-->");

        jMenuItemCPTXT.setText("Plain Text");
        jMenuItemCPTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCPTXTActionPerformed(evt);
            }
        });
        jMenuCP.add(jMenuItemCPTXT);

        jMenuItemCPXML.setText("XML");
        jMenuItemCPXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCPXMLActionPerformed(evt);
            }
        });
        jMenuCP.add(jMenuItemCPXML);

        jMenuItemCPCSV.setText("CSV");
        jMenuItemCPCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCPCSVActionPerformed(evt);
            }
        });
        jMenuCP.add(jMenuItemCPCSV);

        jPopupMenu.add(jMenuCP);

        jMenuSpSMS.setText("Sms's from this contact\\s");
        jMenuSpSMS.setActionCommand("Sms's from this contact/s");

        jMenuItemSelectedSMSTxt.setText("View in PlainText");
        jMenuItemSelectedSMSTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectedSMSTxtActionPerformed(evt);
            }
        });
        jMenuSpSMS.add(jMenuItemSelectedSMSTxt);

        jMenuItemSelectedSMSXML.setText("View in Xml");
        jMenuItemSelectedSMSXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectedSMSXMLActionPerformed(evt);
            }
        });
        jMenuSpSMS.add(jMenuItemSelectedSMSXML);

        jMenuItemSelectedSMSCSV.setText("View in Csv");
        jMenuItemSelectedSMSCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectedSMSCSVActionPerformed(evt);
            }
        });
        jMenuSpSMS.add(jMenuItemSelectedSMSCSV);

        jPopupMenu.add(jMenuSpSMS);

        jMenuSpCallLogs.setText("Call Logs from this contact\\s");
        jMenuSpCallLogs.setActionCommand("Sms's from this contact/s");

        jMenuItemSelectedCallLogsText.setText("View in PlainText");
        jMenuItemSelectedCallLogsText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectedCallLogsTextActionPerformed(evt);
            }
        });
        jMenuSpCallLogs.add(jMenuItemSelectedCallLogsText);

        jMenuItemSelectedCallLogsXML.setText("View in Xml");
        jMenuItemSelectedCallLogsXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectedCallLogsXMLActionPerformed(evt);
            }
        });
        jMenuSpCallLogs.add(jMenuItemSelectedCallLogsXML);

        jMenuItemSelectedCallLogsCSV.setText("View in Csv");
        jMenuItemSelectedCallLogsCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectedCallLogsCSVActionPerformed(evt);
            }
        });
        jMenuSpCallLogs.add(jMenuItemSelectedCallLogsCSV);

        jPopupMenu.add(jMenuSpCallLogs);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IPDdump");
        setMinimumSize(new java.awt.Dimension(100, 500));

        jTableSMS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sent?", "Number", "Text", "Sent Date", "Received Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSMS.setName("SMS"); // NOI18N
        jTableSMS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSMSMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableSMS);
        jTableSMS.getColumnModel().getColumn(0).setMinWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setMaxWidth(40);
        jTableSMS.getColumnModel().getColumn(1).setMaxWidth(150);
        jTableSMS.getColumnModel().getColumn(2).setMinWidth(150);
        jTableSMS.getColumnModel().getColumn(3).setMaxWidth(200);
        jTableSMS.getColumnModel().getColumn(4).setMaxWidth(200);

        javax.swing.GroupLayout jPanelSMSLayout = new javax.swing.GroupLayout(jPanelSMS);
        jPanelSMS.setLayout(jPanelSMSLayout);
        jPanelSMSLayout.setHorizontalGroup(
            jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );
        jPanelSMSLayout.setVerticalGroup(
            jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("SMS", jPanelSMS);

        jTableContacts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email", "Mobile", "Work", "Home", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableContacts.setName("Contacts"); // NOI18N
        jTableContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableContactsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableContacts);
        jTableContacts.getColumnModel().getColumn(0).setMinWidth(100);
        jTableContacts.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTableContacts.getColumnModel().getColumn(0).setMaxWidth(300);
        jTableContacts.getColumnModel().getColumn(1).setPreferredWidth(170);
        jTableContacts.getColumnModel().getColumn(1).setMaxWidth(300);
        jTableContacts.getColumnModel().getColumn(2).setMinWidth(120);
        jTableContacts.getColumnModel().getColumn(2).setPreferredWidth(120);
        jTableContacts.getColumnModel().getColumn(2).setMaxWidth(180);
        jTableContacts.getColumnModel().getColumn(3).setMinWidth(120);
        jTableContacts.getColumnModel().getColumn(3).setPreferredWidth(120);
        jTableContacts.getColumnModel().getColumn(3).setMaxWidth(180);
        jTableContacts.getColumnModel().getColumn(4).setMinWidth(120);
        jTableContacts.getColumnModel().getColumn(4).setPreferredWidth(120);
        jTableContacts.getColumnModel().getColumn(4).setMaxWidth(180);
        jTableContacts.getColumnModel().getColumn(5).setMinWidth(60);

        javax.swing.GroupLayout jPanelContactsLayout = new javax.swing.GroupLayout(jPanelContacts);
        jPanelContacts.setLayout(jPanelContactsLayout);
        jPanelContactsLayout.setHorizontalGroup(
            jPanelContactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );
        jPanelContactsLayout.setVerticalGroup(
            jPanelContactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Contacts", jPanelContacts);

        jTableMemos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Memo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMemos.setName("Memos"); // NOI18N
        jTableMemos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMemosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableMemos);
        jTableMemos.getColumnModel().getColumn(0).setMinWidth(100);
        jTableMemos.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTableMemos.getColumnModel().getColumn(0).setMaxWidth(250);
        jTableMemos.getColumnModel().getColumn(1).setPreferredWidth(500);

        javax.swing.GroupLayout jPanelMemoLayout = new javax.swing.GroupLayout(jPanelMemo);
        jPanelMemo.setLayout(jPanelMemoLayout);
        jPanelMemoLayout.setHorizontalGroup(
            jPanelMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );
        jPanelMemoLayout.setVerticalGroup(
            jPanelMemoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Memos", jPanelMemo);

        jTableTasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task", "Status", "Priority", "Due Date", "Reminder", "Notes", "Time Zone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTasksMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableTasks);
        jTableTasks.getColumnModel().getColumn(0).setMinWidth(70);
        jTableTasks.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTableTasks.getColumnModel().getColumn(0).setMaxWidth(250);
        jTableTasks.getColumnModel().getColumn(1).setMinWidth(80);
        jTableTasks.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTableTasks.getColumnModel().getColumn(1).setMaxWidth(80);
        jTableTasks.getColumnModel().getColumn(2).setMinWidth(60);
        jTableTasks.getColumnModel().getColumn(2).setPreferredWidth(60);
        jTableTasks.getColumnModel().getColumn(2).setMaxWidth(60);

        javax.swing.GroupLayout jPanelTasksLayout = new javax.swing.GroupLayout(jPanelTasks);
        jPanelTasks.setLayout(jPanelTasksLayout);
        jPanelTasksLayout.setHorizontalGroup(
            jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );
        jPanelTasksLayout.setVerticalGroup(
            jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Tasks", jPanelTasks);

        jTableCallLogs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Date", "Status", "Duration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCallLogs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCallLogsMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableCallLogs);
        jTableCallLogs.getColumnModel().getColumn(0).setMinWidth(100);
        jTableCallLogs.getColumnModel().getColumn(0).setPreferredWidth(170);
        jTableCallLogs.getColumnModel().getColumn(0).setMaxWidth(300);
        jTableCallLogs.getColumnModel().getColumn(1).setMinWidth(170);
        jTableCallLogs.getColumnModel().getColumn(1).setPreferredWidth(180);
        jTableCallLogs.getColumnModel().getColumn(1).setMaxWidth(300);
        jTableCallLogs.getColumnModel().getColumn(2).setMinWidth(100);
        jTableCallLogs.getColumnModel().getColumn(2).setPreferredWidth(100);
        jTableCallLogs.getColumnModel().getColumn(2).setMaxWidth(300);
        jTableCallLogs.getColumnModel().getColumn(3).setMinWidth(60);
        jTableCallLogs.getColumnModel().getColumn(3).setPreferredWidth(60);
        jTableCallLogs.getColumnModel().getColumn(3).setMaxWidth(60);

        javax.swing.GroupLayout jPanelCallLogsLayout = new javax.swing.GroupLayout(jPanelCallLogs);
        jPanelCallLogs.setLayout(jPanelCallLogsLayout);
        jPanelCallLogsLayout.setHorizontalGroup(
            jPanelCallLogsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );
        jPanelCallLogsLayout.setVerticalGroup(
            jPanelCallLogsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Call Logs", jPanelCallLogs);

        status_label7.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label7.setText("Coming Soon");

        javax.swing.GroupLayout jPanelCalendarLayout = new javax.swing.GroupLayout(jPanelCalendar);
        jPanelCalendar.setLayout(jPanelCalendarLayout);
        jPanelCalendarLayout.setHorizontalGroup(
            jPanelCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCalendarLayout.createSequentialGroup()
                .addGap(306, 306, 306)
                .addComponent(status_label7, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addGap(306, 306, 306))
        );
        jPanelCalendarLayout.setVerticalGroup(
            jPanelCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCalendarLayout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(status_label7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(219, 219, 219))
        );

        mainTabbedPane.addTab("Calendar", jPanelCalendar);

        status_label6.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label6.setText("Coming Soon");

        javax.swing.GroupLayout jPanelOptionsLayout = new javax.swing.GroupLayout(jPanelOptions);
        jPanelOptions.setLayout(jPanelOptionsLayout);
        jPanelOptionsLayout.setHorizontalGroup(
            jPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOptionsLayout.createSequentialGroup()
                .addGap(306, 306, 306)
                .addComponent(status_label6, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addGap(306, 306, 306))
        );
        jPanelOptionsLayout.setVerticalGroup(
            jPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOptionsLayout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(status_label6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(219, 219, 219))
        );

        mainTabbedPane.addTab("Options", jPanelOptions);

        status_label.setFont(new java.awt.Font("Tahoma", 0, 12));
        status_label.setText("Welcome to IPDdump - http://code.google.com/p/ipddump/");

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        ResolveCheckBox.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        ResolveCheckBox.setSelected(true);
        ResolveCheckBox.setText("Resolve Names?");
        ResolveCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResolveCheckBoxActionPerformed(evt);
            }
        });
        fileMenu.add(ResolveCheckBox);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save Selected As ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenuHelp.setText("Help");

        jMenuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);

        menuBar.add(jMenuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(status_label, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status_label)
                .addContainerGap())
        );

        mainTabbedPane.getAccessibleContext().setAccessibleName("tabbedPane");

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-762)/2, (screenSize.height-560)/2, 762, 560);
    }// </editor-fold>//GEN-END:initComponents

    public IpdDump_NewGUI() {
        initComponents();
        setTitle("IPDdump v" + rb.getString("version"));
        viewer = new DataViewer();
        IpdChooser.setAcceptAllFileFilterUsed(false);
        IpdChooser.setFileHidingEnabled(false);
        IpdChooser.setMultiSelectionEnabled(false);
        IpdChooser.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".IPD"}, "BB Backup Files"));

        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.setFileHidingEnabled(false);
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".csv"}, "Csv Document *.csv"));
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".xml"}, "Xml Document *.xml"));
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".txt"}, "Text Document *.txt"));

        SMSDataModel = jTableSMS.getModel();
        ContactsDataModel = jTableContacts.getModel();
        MemosDataModel = jTableMemos.getModel();
        TasksDataModel = jTableTasks.getModel();
        CallLogsDataModel = jTableCallLogs.getModel();

        SMStabINDEX = mainTabbedPane.indexOfTab("SMS");
        ContactstabINDEX = mainTabbedPane.indexOfTab("Contacts");
        CalendartabINDEX = mainTabbedPane.indexOfTab("Calendar");
        TaskstabINDEX = mainTabbedPane.indexOfTab("Tasks");
        OptionstabINDEX = mainTabbedPane.indexOfTab("Options");
        MemostabINDEX = mainTabbedPane.indexOfTab("Memos");
        CallLogstabINDEX = mainTabbedPane.indexOfTab("Call Logs");
        ActiveTAB = mainTabbedPane.getSelectedIndex();

        status_label.setText(welcomeMsg);
        saveAsMenuItem.setEnabled(false);
    }
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        status_label.setText("WORKING...  be patient!");
        if (JFileChooser.APPROVE_OPTION == IpdChooser.showOpenDialog(null)) {
            long startTime = System.currentTimeMillis();

            jFileChooser1.setSelectedFile(IpdChooser.getSelectedFile());
            setTitle("IPDdump " + jFileChooser1.getSelectedFile().getPath());

            String[] args = {IpdChooser.getSelectedFile().getPath()};
            try {
                IPDParser parser = new IPDParser(args[0]);
                parser.enableDebuging(); // TODO: Comment This Line Before Publish
                database = parser.parse();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(MessageFrame, "ERROR: " + ex.getMessage());
                saveAsMenuItem.setEnabled(false);
            }
            resolveNames = ResolveCheckBox.isSelected();

            SMS = new SmsWriters(database, resolveNames);
            totalSMS = SMS.getSize();

            Contacts = new ContactsWriters(database);
            totalContacts = Contacts.getSize();
            finder = new Finder(database);

            Memos = new MemosWriters(database);
            totalMemos = Memos.getSize();

            CallLogs = new CallLogsWriters(database);
            totalCallLogs = CallLogs.getSize();

            Tasks = new TasksWriters(database);
            totalTasks = Tasks.getSize();

            fillTables();
            long endTime = System.currentTimeMillis() - startTime;
            status_label.setText(welcomeMsg + " -->Time of load: " + (endTime / 1000.0) + "sec");
        } else {
            status_label.setText(welcomeMsg);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed
    private void fillTables() {
        resolveNames = ResolveCheckBox.isSelected();

        fillSMSTable();
        fillContactsTable();
        fillMemosTable();
        fillTasksTable();
        fillCallLogsTable();

        saveAsMenuItem.setEnabled(true);
    }

    private void fillCallLogsTable() {
        CallLogsTablePrepair();

        mainTabbedPane.setTitleAt(CallLogstabINDEX, "Call Logs (" + totalCallLogs + ")");
        int i = 0;

        for (CallLog record : database.getCallLogs()) {

            CallLogsDataModel.setValueAt(record.getName(), i, CallLogsNameIndex);
            CallLogsDataModel.setValueAt(record.getDate().toString(), i, CallLogsDateIndex);
            CallLogsDataModel.setValueAt(record.getStatus(), i, CallLogsStatusIndex);
            CallLogsDataModel.setValueAt(record.getDuration(), i, CallLogsDurationIndex);
            i++;//Go to next Line in the table

        }
    }

    private void fillSMSTable() {

        smsTablePrepair();
        mainTabbedPane.setTitleAt(SMStabINDEX, "SMS (" + totalSMS + ")");
        int i = 0;
        String sSent = "";
        String Name = "";

        for (SMSMessage record : database.getSMSRecords()) {
            if (record.wasSent()) {
                sSent = "true";
            } else {
                sSent = "false";
            }
            if (resolveNames) {
                Name = finder.findContactByPhoneNumber(record.getNumber());
            } else {
                Name = record.getNumber();
            }
            SMSDataModel.setValueAt(sSent, i, SMSWasSentIndex);
            SMSDataModel.setValueAt(Name, i, SMSNumberIndex);
            SMSDataModel.setValueAt(record.getText(), i, SMSTextIndex);
            SMSDataModel.setValueAt(record.getSent().toString(), i, SMSSentIndex);
            SMSDataModel.setValueAt(record.getReceived().toString(), i, SMSReceivedIndex);
            i++;//Go to next Line in the table
        }
    }

    private void fillContactsTable() {

        ContactsTablePrepair();
        mainTabbedPane.setTitleAt(ContactstabINDEX, "Contacts (" + totalContacts + ")");
        int i = 0;

        for (Contact record : database.contacts()) {

            ContactsDataModel.setValueAt(record.getName(), i, ContactsNameIndex);
            ContactsDataModel.setValueAt(record.getEmail(), i, ContactsEmailIndex);
            ContactsDataModel.setValueAt(record.getMobilePhone(), i, ContactsMobileIndex);
            ContactsDataModel.setValueAt(record.getHomePhone(), i, ContactsHomeNumberIndex);
            ContactsDataModel.setValueAt(record.getWorkPhone(), i, ContactsWorkIndex);
            ContactsDataModel.setValueAt(record.getNotes(), i, ContactsNotesIndex);
            i++;//Go to next Line in the table
        }
    }

    private void fillMemosTable() {
        MemoTablePrepair();
        mainTabbedPane.setTitleAt(MemostabINDEX, "Memos (" + totalMemos + ")");
        int i = 0;

        for (Memo record : database.getMemos()) {

            MemosDataModel.setValueAt(record.getTitle(), i, MemosTitleIndex);
            MemosDataModel.setValueAt(record.getMemo(), i, MemosMemoIndex);
            i++;//Go to next Line in the table
        }
    }

    private void fillTasksTable() {
        TasksTablePrepair();
        mainTabbedPane.setTitleAt(TaskstabINDEX, "Tasks (" + totalTasks + ")");
        int i = 0;

        for (Task record : database.getTasks()) {

            TasksDataModel.setValueAt(record.getTask(), i, TaskTitleIndex);
            TasksDataModel.setValueAt(record.getStatus(), i, TaskStatusIndex);
            TasksDataModel.setValueAt(record.getPriority(), i, TaskPriorityIndex);
            TasksDataModel.setValueAt(record.getDue(), i, TasksDueIndex);
            TasksDataModel.setValueAt(record.getReminder(), i, TasksReminderIndex);
            TasksDataModel.setValueAt(record.getNotes(), i, TasksNotesIndex);
            TasksDataModel.setValueAt(record.getTimeZone(), i, TasksTimeZoneIndex);
            i++;//Go to next Line in the table
        }
    }

    private void jTableSMSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSMSMouseClicked
        tableClick(evt);
}//GEN-LAST:event_jTableSMSMouseClicked

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        SMSSelectedRows = jTableSMS.getSelectedRows();
        ContactsSelectedRows = jTableContacts.getSelectedRows();
        MemosSelectedRows = jTableMemos.getSelectedRows();
        ActiveTAB = mainTabbedPane.getSelectedIndex();


        if (ActiveTAB == SMStabINDEX && totalSMS != 0 && SMSSelectedRows.length > 0) {
            if (saveDialog()) {
                if (ext.equalsIgnoreCase("txt")) {
                    fileWriter.writeTextToFile(fileToSave, SMS.toPlainText(SMSSelectedRows), ".txt");
                } else if (ext.equalsIgnoreCase("csv")) {
                    fileWriter.writeTextToFile(fileToSave, SMS.toCSV(SMSSelectedRows), ".csv");
                } else if (ext.equalsIgnoreCase("xml")) {
                    fileWriter.writeXMLtoFile(fileToSave, SMS.toXML(SMSSelectedRows));
                }
            }
        } else if (ActiveTAB == ContactstabINDEX && totalContacts != 0 && ContactsSelectedRows.length > 0) {
            if (saveDialog()) {
                if (ext.equalsIgnoreCase("txt")) {
                    fileWriter.writeTextToFile(fileToSave, Contacts.toPlainText(ContactsSelectedRows), ".txt");
                } else if (ext.equalsIgnoreCase("csv")) {
                    fileWriter.writeTextToFile(fileToSave, Contacts.toCSV(ContactsSelectedRows), ".csv");
                } else if (ext.equalsIgnoreCase("xml")) {
                    fileWriter.writeXMLtoFile(fileToSave, Contacts.toXML(ContactsSelectedRows));
                }
            }
        } else if (ActiveTAB == MemostabINDEX && totalMemos != 0 && MemosSelectedRows.length > 0) {
            if (saveDialog()) {
                if (ext.equalsIgnoreCase("txt")) {
                    fileWriter.writeTextToFile(fileToSave, Memos.toPlainText(MemosSelectedRows), ".txt");
                } else if (ext.equalsIgnoreCase("csv")) {
                    fileWriter.writeTextToFile(fileToSave, Memos.toCSV(MemosSelectedRows), ".csv");
                } else if (ext.equalsIgnoreCase("xml")) {
                    fileWriter.writeXMLtoFile(fileToSave, Memos.toXML(MemosSelectedRows));
                }
            }
        } else if (ActiveTAB == TaskstabINDEX && totalTasks != 0 && TasksSelectedRows.length > 0) {
            if (saveDialog()) {
                if (ext.equalsIgnoreCase("txt")) {
                    fileWriter.writeTextToFile(fileToSave, Tasks.toPlainText(TasksSelectedRows), ".txt");
                } else if (ext.equalsIgnoreCase("csv")) {
                    fileWriter.writeTextToFile(fileToSave, Tasks.toCSV(TasksSelectedRows), ".csv");
                } else if (ext.equalsIgnoreCase("xml")) {
                    fileWriter.writeXMLtoFile(fileToSave, Tasks.toXML(TasksSelectedRows));
                }
            }
        } else if (ActiveTAB == CallLogstabINDEX && totalCallLogs != 0 && CallLogsSelectedRows.length > 0) {
            if (saveDialog()) {
                if (ext.equalsIgnoreCase("txt")) {
                    fileWriter.writeTextToFile(fileToSave, CallLogs.toPlainText(CallLogsSelectedRows), ".txt");
                } else if (ext.equalsIgnoreCase("csv")) {
                    fileWriter.writeTextToFile(fileToSave, CallLogs.toCSV(CallLogsSelectedRows), ".csv");
                } else if (ext.equalsIgnoreCase("xml")) {
                    fileWriter.writeXMLtoFile(fileToSave, CallLogs.toXML(CallLogsSelectedRows));
                }
            }
        } else {
            JOptionPane.showMessageDialog(MessageFrame, "Select the items you want to save");
        }


    }//GEN-LAST:event_saveAsMenuItemActionPerformed
    private boolean saveDialog() {
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showSaveDialog(null)) {

            int lastDot = jFileChooser1.getFileFilter().getDescription().lastIndexOf(".") + 1;
            ext = jFileChooser1.getFileFilter().getDescription().substring(lastDot);
            fileToSave = jFileChooser1.getSelectedFile().getAbsolutePath() + "." + ext;
            //System.out.println(fToSave+" - "+ext);
            return true;
        }
        return false;
    }

    private void ShowPopup(MouseEvent e) {
        jPopupMenu.show(e.getComponent(),
                e.getX(), e.getY());
    }

    private void jMenuItemXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemXMLActionPerformed
        String tmp = "";
        if (ActiveTAB == SMStabINDEX && totalSMS != 0 && SMSSelectedRows.length > 0) {
            tmp = SMS.toXML(SMSSelectedRows).asXML();
            viewer.setTitle("SMS Viewer - XML");
        } else if (ActiveTAB == ContactstabINDEX && totalContacts != 0 && ContactsSelectedRows.length > 0) {
            tmp = Contacts.toXML(ContactsSelectedRows).asXML();
            viewer.setTitle("Contacts Viewer - XML");
        } else if (ActiveTAB == MemostabINDEX && totalMemos != 0 && MemosSelectedRows.length > 0) {
            tmp = Memos.toXML(MemosSelectedRows).asXML();
            viewer.setTitle("Memos Viewer - XML");
        } else if (ActiveTAB == TaskstabINDEX && totalTasks != 0 && TasksSelectedRows.length > 0) {
            tmp = Tasks.toXML(TasksSelectedRows).asXML();
            viewer.setTitle("Tasks Viewer - XML");
        } else if (ActiveTAB == CallLogstabINDEX && totalCallLogs != 0 && CallLogsSelectedRows.length > 0) {
            tmp = CallLogs.toXML(CallLogsSelectedRows).asXML();
            viewer.setTitle("Call Logs Viewer - XML");
        }


        viewer.setXml(tmp);
        viewer.setVisible(true);
}//GEN-LAST:event_jMenuItemXMLActionPerformed

    private void jMenuItemTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTxtActionPerformed

        String tmp = "";
        if (ActiveTAB == SMStabINDEX && totalSMS != 0 && SMSSelectedRows.length > 0) {
            tmp = SMS.toPlainText(SMSSelectedRows);
            viewer.setTitle("SMS Viewer - Plain Text");
        } else if (ActiveTAB == ContactstabINDEX && totalContacts != 0 && ContactsSelectedRows.length > 0) {
            tmp = Contacts.toPlainText(ContactsSelectedRows);
            viewer.setTitle("Contacts Viewer - Plain Text");
        } else if (ActiveTAB == MemostabINDEX && totalMemos != 0 && MemosSelectedRows.length > 0) {
            tmp = Memos.toPlainText(MemosSelectedRows);
            viewer.setTitle("Memos Viewer - Plain Text");
        } else if (ActiveTAB == TaskstabINDEX && totalTasks != 0 && TasksSelectedRows.length > 0) {
            tmp = Tasks.toPlainText(TasksSelectedRows);
            viewer.setTitle("Tasks Viewer - Plain Text");
        } else if (ActiveTAB == CallLogstabINDEX && totalCallLogs != 0 && CallLogsSelectedRows.length > 0) {
            tmp = CallLogs.toPlainText(CallLogsSelectedRows);
            viewer.setTitle("Call Logs Viewer -  Plain Text");
        }

        viewer.setTxt(tmp);

        viewer.setVisible(true);
}//GEN-LAST:event_jMenuItemTxtActionPerformed

    private void jMenuItemCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCSVActionPerformed
        String tmp = "";

        if (ActiveTAB == SMStabINDEX && totalSMS != 0 && SMSSelectedRows.length > 0) {
            tmp = SMS.toCSV(SMSSelectedRows);
            viewer.setTitle("SMS Viewer - Csv");
        } else if (ActiveTAB == ContactstabINDEX && totalContacts != 0 && ContactsSelectedRows.length > 0) {
            tmp = Contacts.toCSV(ContactsSelectedRows);
            viewer.setTitle("Contacts Viewer - Csv");
        } else if (ActiveTAB == MemostabINDEX && totalMemos != 0 && MemosSelectedRows.length > 0) {
            tmp = Memos.toCSV(MemosSelectedRows);
            viewer.setTitle("Memos Viewer - Csv");
        } else if (ActiveTAB == TaskstabINDEX && totalTasks != 0 && TasksSelectedRows.length > 0) {
            tmp = Tasks.toCSV(TasksSelectedRows);
            viewer.setTitle("Tasks Viewer - Csv");
        } else if (ActiveTAB == CallLogstabINDEX && totalCallLogs != 0 && CallLogsSelectedRows.length > 0) {
            tmp = CallLogs.toCSV(CallLogsSelectedRows);
            viewer.setTitle("Call Logs Viewer - Csv");
        }

        viewer.setCvs(tmp);

        viewer.setVisible(true);
}//GEN-LAST:event_jMenuItemCSVActionPerformed

    private void jMenuItemCPTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCPTXTActionPerformed
        String tmp = "";
        if (ActiveTAB == SMStabINDEX && totalSMS != 0 && SMSSelectedRows.length > 0) {
            tmp = SMS.toPlainText(SMSSelectedRows);
        } else if (ActiveTAB == ContactstabINDEX && totalContacts != 0 && ContactsSelectedRows.length > 0) {
            tmp = Contacts.toPlainText(ContactsSelectedRows);
        } else if (ActiveTAB == MemostabINDEX && totalMemos != 0 && MemosSelectedRows.length > 0) {
            tmp = Memos.toPlainText(MemosSelectedRows);
        } else if (ActiveTAB == TaskstabINDEX && totalTasks != 0 && TasksSelectedRows.length > 0) {
            tmp = Tasks.toPlainText(TasksSelectedRows);
        } else if (ActiveTAB == CallLogstabINDEX && totalCallLogs != 0 && CallLogsSelectedRows.length > 0) {
            tmp = CallLogs.toPlainText(CallLogsSelectedRows);
        }
        setClipboardContents(tmp);
}//GEN-LAST:event_jMenuItemCPTXTActionPerformed

    private void jMenuItemCPXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCPXMLActionPerformed
        String tmp = "";
        if (ActiveTAB == SMStabINDEX && totalSMS != 0 && SMSSelectedRows.length > 0) {
            tmp = SMS.toXML(SMSSelectedRows).asXML();
        } else if (ActiveTAB == ContactstabINDEX && totalContacts != 0 && ContactsSelectedRows.length > 0) {
            tmp = Contacts.toXML(ContactsSelectedRows).asXML();
        } else if (ActiveTAB == MemostabINDEX && totalMemos != 0 && MemosSelectedRows.length > 0) {
            tmp = Memos.toXML(MemosSelectedRows).asXML();
        } else if (ActiveTAB == TaskstabINDEX && totalTasks != 0 && TasksSelectedRows.length > 0) {
            tmp = Tasks.toXML(TasksSelectedRows).asXML();
        } else if (ActiveTAB == CallLogstabINDEX && totalCallLogs != 0 && CallLogsSelectedRows.length > 0) {
            tmp = CallLogs.toXML(CallLogsSelectedRows).asXML();
        }
        setClipboardContents(tmp);
}//GEN-LAST:event_jMenuItemCPXMLActionPerformed

    private void jMenuItemCPCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCPCSVActionPerformed
        String tmp = "";

        if (ActiveTAB == SMStabINDEX && totalSMS != 0 && SMSSelectedRows.length > 0) {
            tmp = SMS.toCSV(SMSSelectedRows);
        } else if (ActiveTAB == ContactstabINDEX && totalContacts != 0 && ContactsSelectedRows.length > 0) {
            tmp = Contacts.toCSV(ContactsSelectedRows);
        } else if (ActiveTAB == MemostabINDEX && totalMemos != 0 && MemosSelectedRows.length > 0) {
            tmp = Memos.toCSV(MemosSelectedRows);
        } else if (ActiveTAB == TaskstabINDEX && totalTasks != 0 && TasksSelectedRows.length > 0) {
            tmp = Tasks.toCSV(TasksSelectedRows);
        } else if (ActiveTAB == CallLogstabINDEX && totalCallLogs != 0 && CallLogsSelectedRows.length > 0) {
            tmp = CallLogs.toCSV(CallLogsSelectedRows);
        }
        setClipboardContents(tmp);
}//GEN-LAST:event_jMenuItemCPCSVActionPerformed

    private void jTableContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableContactsMouseClicked
        tableClick(evt);
}//GEN-LAST:event_jTableContactsMouseClicked
    private void tableClick(java.awt.event.MouseEvent evt) {
        int[] SelectedRows = new int[0];
        String evtObj = null;
        ActiveTAB = mainTabbedPane.getSelectedIndex();

        if (ActiveTAB == SMStabINDEX) {
            SelectedRows = SMSSelectedRows = jTableSMS.getSelectedRows();
            evtObj = "SMS";
            jPopupMenu.remove(jMenuSpSMS);
            jPopupMenu.remove(jMenuSpCallLogs);
        } else if (ActiveTAB == ContactstabINDEX) {
            SelectedRows = ContactsSelectedRows = jTableContacts.getSelectedRows();
            evtObj = "Contacts";
            if (totalSMS > 0) {
                jPopupMenu.add(jMenuSpSMS);
            } else {
                jPopupMenu.remove(jMenuSpSMS);
            }
            if (totalCallLogs > 0) {
                jPopupMenu.add(jMenuSpCallLogs);
            } else {
                jPopupMenu.remove(jMenuSpCallLogs);
            }
        } else if (ActiveTAB == MemostabINDEX) {
            SelectedRows = MemosSelectedRows = jTableMemos.getSelectedRows();
            evtObj = "Memos";
            jPopupMenu.remove(jMenuSpSMS);
        } else if (ActiveTAB == TaskstabINDEX) {
            SelectedRows = TasksSelectedRows = jTableTasks.getSelectedRows();
            evtObj = "Tasks";
            jPopupMenu.remove(jMenuSpSMS);
            jPopupMenu.remove(jMenuSpCallLogs);
        } else if (ActiveTAB == CallLogstabINDEX) {
            SelectedRows = CallLogsSelectedRows = jTableCallLogs.getSelectedRows();
            evtObj = "Call Logs";
            jPopupMenu.remove(jMenuSpSMS);
            jPopupMenu.remove(jMenuSpCallLogs);
        }

        if (evt.getButton() == MouseEvent.BUTTON3 && SelectedRows.length > 0) {
            ShowPopup(evt);
        } else {
            if (evt.getButton() == MouseEvent.BUTTON3 && SelectedRows.length == 0) {
                JOptionPane.showMessageDialog(MessageFrame, "Select the " + evtObj + " you want to View");
            }
        }

        if (evt.getClickCount() == 2) {
            jMenuItemTxtActionPerformed(null);
        }

    }
    private void ResolveCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResolveCheckBoxActionPerformed
        resolveNames = ResolveCheckBox.isSelected();

        if (saveAsMenuItem.isEnabled()) {
            SMS = new SmsWriters(database, resolveNames);
            fillSMSTable();
        }
    }//GEN-LAST:event_ResolveCheckBoxActionPerformed

    private void jTableMemosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMemosMouseClicked
        tableClick(evt);
}//GEN-LAST:event_jTableMemosMouseClicked

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        new IPDdumpAboutBox(this, false).setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jTableTasksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTasksMouseClicked
        tableClick(evt);
    }//GEN-LAST:event_jTableTasksMouseClicked

    private void jMenuItemSelectedSMSTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectedSMSTxtActionPerformed
        int[] selectedRows = null;
        if (ActiveTAB == ContactstabINDEX) {
            selectedRows = finder.findSmsByContacts(ContactsSelectedRows);
        }

        if (selectedRows.length != 0) {
            String tmp = SMS.toPlainText(selectedRows);
            viewer.setTitle("SMS Viewer - Plain Text");
            viewer.setTxt(tmp);
            viewer.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(MessageFrame, "No Sms Messages were found!");
        }
}//GEN-LAST:event_jMenuItemSelectedSMSTxtActionPerformed

    private void jMenuItemSelectedSMSXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectedSMSXMLActionPerformed
        int[] selectedSMS = finder.findSmsByContacts(ContactsSelectedRows);
        if (selectedSMS.length != 0) {
            String tmp = SMS.toXML(selectedSMS).asXML();
            viewer.setTitle("SMS Viewer - XML");
            viewer.setXml(tmp);
            viewer.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(MessageFrame, "No Sms Messages were found!");
        }
}//GEN-LAST:event_jMenuItemSelectedSMSXMLActionPerformed

    private void jMenuItemSelectedSMSCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectedSMSCSVActionPerformed
        int[] selectedSMS = finder.findSmsByContacts(ContactsSelectedRows);
        if (selectedSMS.length != 0) {
            String tmp = SMS.toCSV(selectedSMS);
            viewer.setTitle("SMS Viewer - CSV");
            viewer.setTxt(tmp);
            viewer.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(MessageFrame, "No Sms Messages were found for this Contact!");
        }
}//GEN-LAST:event_jMenuItemSelectedSMSCSVActionPerformed

    private void jTableCallLogsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCallLogsMouseClicked
        tableClick(evt);
    }//GEN-LAST:event_jTableCallLogsMouseClicked

    private void jMenuItemSelectedCallLogsTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectedCallLogsTextActionPerformed
        int[] selectedRows = null;
        if (ActiveTAB == ContactstabINDEX) {
            selectedRows = finder.findCallLogsByContacts(ContactsSelectedRows);
        }

        if (selectedRows.length != 0) {
            String tmp = CallLogs.toPlainText(selectedRows);
            viewer.setTitle("Call Logs Viewer - Plain Text");
            viewer.setTxt(tmp);
            viewer.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(MessageFrame, "No Call Logs were found for this Contact!");
        }
}//GEN-LAST:event_jMenuItemSelectedCallLogsTextActionPerformed

    private void jMenuItemSelectedCallLogsXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectedCallLogsXMLActionPerformed
        int[] selectedRows = null;
        if (ActiveTAB == ContactstabINDEX) {
            selectedRows = finder.findCallLogsByContacts(ContactsSelectedRows);
        }

        if (selectedRows.length != 0) {
            String tmp = CallLogs.toXML(selectedRows).asXML();
            viewer.setTitle("Call Logs Viewer - XML");
            viewer.setTxt(tmp);
            viewer.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(MessageFrame, "No Call Logs were found for this Contact!");
        }
}//GEN-LAST:event_jMenuItemSelectedCallLogsXMLActionPerformed

    private void jMenuItemSelectedCallLogsCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectedCallLogsCSVActionPerformed
        int[] selectedRows = null;
        if (ActiveTAB == ContactstabINDEX) {
            selectedRows = finder.findCallLogsByContacts(ContactsSelectedRows);
        }

        if (selectedRows.length != 0) {
            String tmp = CallLogs.toCSV(selectedRows);
            viewer.setTitle("Call Logs Viewer - CSV");
            viewer.setTxt(tmp);
            viewer.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(MessageFrame, "No Call Logs were found for this Contact!");
        }
}//GEN-LAST:event_jMenuItemSelectedCallLogsCSVActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new IpdDump_NewGUI().setVisible(true);
            }
        });
    }

    // <editor-fold defaultstate="collapsed" desc="Table Prepair Code - - NEED TO find alternative way of doing this??">
    private void CallLogsTablePrepair() {
        jTableCallLogs.setModel(new javax.swing.table.DefaultTableModel(
                new Object[totalCallLogs][3],
                new String[]{
                    "Name", "Date", "Status", "Duration"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        jTableCallLogs.getColumnModel().getColumn(0).setMinWidth(100);
        jTableCallLogs.getColumnModel().getColumn(0).setPreferredWidth(170);
        jTableCallLogs.getColumnModel().getColumn(0).setMaxWidth(300);
        jTableCallLogs.getColumnModel().getColumn(1).setMinWidth(170);
        jTableCallLogs.getColumnModel().getColumn(1).setPreferredWidth(180);
        jTableCallLogs.getColumnModel().getColumn(1).setMaxWidth(300);
        jTableCallLogs.getColumnModel().getColumn(2).setMinWidth(100);
        jTableCallLogs.getColumnModel().getColumn(2).setPreferredWidth(100);
        jTableCallLogs.getColumnModel().getColumn(2).setMaxWidth(300);
        jTableCallLogs.getColumnModel().getColumn(3).setMinWidth(60);
        jTableCallLogs.getColumnModel().getColumn(3).setPreferredWidth(60);
        jTableCallLogs.getColumnModel().getColumn(3).setMaxWidth(60);


        CallLogsDataModel = jTableCallLogs.getModel();
    }

    private void TasksTablePrepair() {

        jTableTasks.setModel(new javax.swing.table.DefaultTableModel(
                new Object[totalTasks][6],
                new String[]{
                    "Task", "Status", "Priority", "Due Date", "Reminder", "Notes", "Time Zone"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTableTasks.getColumnModel().getColumn(0).setMinWidth(70);
        jTableTasks.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTableTasks.getColumnModel().getColumn(0).setMaxWidth(250);
        jTableTasks.getColumnModel().getColumn(1).setMinWidth(80);
        jTableTasks.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTableTasks.getColumnModel().getColumn(1).setMaxWidth(80);
        jTableTasks.getColumnModel().getColumn(2).setMinWidth(60);
        jTableTasks.getColumnModel().getColumn(2).setPreferredWidth(60);
        jTableTasks.getColumnModel().getColumn(2).setMaxWidth(60);

        TasksDataModel = jTableTasks.getModel();
    }

    private void MemoTablePrepair() {
        jTableMemos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[totalMemos][1],
                new String[]{
                    "Title", "Memo"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTableMemos.getColumnModel().getColumn(0).setMinWidth(100);
        jTableMemos.getColumnModel().getColumn(0).setMaxWidth(250);
        jTableMemos.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTableMemos.getColumnModel().getColumn(1).setPreferredWidth(500);
        MemosDataModel = jTableMemos.getModel();
    }

    private void ContactsTablePrepair() {
        jTableContacts.setModel(new javax.swing.table.DefaultTableModel(
                new Object[totalContacts][5],
                new String[]{
                    "Name", "Email", "Mobile", "Work", "Home", "Notes"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTableContacts.getColumnModel().getColumn(0).setMinWidth(100);
        jTableContacts.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTableContacts.getColumnModel().getColumn(0).setMaxWidth(300);
        jTableContacts.getColumnModel().getColumn(1).setPreferredWidth(170);
        jTableContacts.getColumnModel().getColumn(1).setMaxWidth(300);
        jTableContacts.getColumnModel().getColumn(2).setMinWidth(120);
        jTableContacts.getColumnModel().getColumn(2).setPreferredWidth(120);
        jTableContacts.getColumnModel().getColumn(2).setMaxWidth(180);
        jTableContacts.getColumnModel().getColumn(3).setMinWidth(120);
        jTableContacts.getColumnModel().getColumn(3).setPreferredWidth(120);
        jTableContacts.getColumnModel().getColumn(3).setMaxWidth(180);
        jTableContacts.getColumnModel().getColumn(4).setMinWidth(120);
        jTableContacts.getColumnModel().getColumn(4).setPreferredWidth(120);
        jTableContacts.getColumnModel().getColumn(4).setMaxWidth(180);
        jTableContacts.getColumnModel().getColumn(5).setMinWidth(60);

        ContactsDataModel = jTableContacts.getModel();
    }

    private void smsTablePrepair() {
        jTableSMS.setModel(new javax.swing.table.DefaultTableModel(
                new Object[totalSMS][4],
                new String[]{
                    "Sent?", "Number", "Text", "Sent Date", "Received Date"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        jScrollPane1.setViewportView(jTableSMS);
        jTableSMS.getColumnModel().getColumn(0).setMinWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setMaxWidth(40);
        jTableSMS.getColumnModel().getColumn(1).setMaxWidth(150);
        jTableSMS.getColumnModel().getColumn(2).setMinWidth(150);
        jTableSMS.getColumnModel().getColumn(3).setMaxWidth(200);
        jTableSMS.getColumnModel().getColumn(4).setMaxWidth(200);

        SMSDataModel = jTableSMS.getModel();
    }// </editor-fold>

    public static void setClipboardContents(String aString) {
        StringSelection stringSelection = new StringSelection(aString);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, (ClipboardOwner) null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser IpdChooser;
    private javax.swing.JFrame MessageFrame;
    private javax.swing.JCheckBoxMenuItem ResolveCheckBox;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenuCP;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemCPCSV;
    private javax.swing.JMenuItem jMenuItemCPTXT;
    private javax.swing.JMenuItem jMenuItemCPXML;
    private javax.swing.JMenuItem jMenuItemCSV;
    private javax.swing.JMenuItem jMenuItemSelectedCallLogsCSV;
    private javax.swing.JMenuItem jMenuItemSelectedCallLogsText;
    private javax.swing.JMenuItem jMenuItemSelectedCallLogsXML;
    private javax.swing.JMenuItem jMenuItemSelectedSMSCSV;
    private javax.swing.JMenuItem jMenuItemSelectedSMSTxt;
    private javax.swing.JMenuItem jMenuItemSelectedSMSXML;
    private javax.swing.JMenuItem jMenuItemTxt;
    private javax.swing.JMenuItem jMenuItemXML;
    private javax.swing.JMenu jMenuSpCallLogs;
    private javax.swing.JMenu jMenuSpSMS;
    private javax.swing.JPanel jPanelCalendar;
    private javax.swing.JPanel jPanelCallLogs;
    private javax.swing.JPanel jPanelContacts;
    private javax.swing.JPanel jPanelMemo;
    private javax.swing.JPanel jPanelOptions;
    private javax.swing.JPanel jPanelSMS;
    private javax.swing.JPanel jPanelTasks;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableCallLogs;
    private javax.swing.JTable jTableContacts;
    private javax.swing.JTable jTableMemos;
    private javax.swing.JTable jTableSMS;
    private javax.swing.JTable jTableTasks;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JLabel status_label;
    private javax.swing.JLabel status_label6;
    private javax.swing.JLabel status_label7;
    // End of variables declaration//GEN-END:variables
}
