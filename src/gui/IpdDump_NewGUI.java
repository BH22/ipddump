
/*
 * IpdDump_NewGUI.java
 *
 * Created on 10 Ιουν 2009, 11:50:15 πμ
 */
package gui;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseEvent;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import org.quaternions.ipddump.*;
import org.quaternions.ipddump.data.*;
import org.quaternions.ipddump.writers.FileWriters;

/**
 *
 * @author Jimmys Daskalakis
 */
public class IpdDump_NewGUI extends javax.swing.JFrame {

    private String path;
    private String pathString;
    private InteractivePagerBackup database;
    private TableModel SMSDataModel;
    private int SMStabINDEX;
    private int ContactstabINDEX;
    private int CalendartabINDEX;
    private int TaskstabINDEX;
    private int OptionstabINDEX;
    private String welcome = "Welcome to IpdDump - http://code.google.com/p/ipddump/";
    private Object[][] smsObj;
    private String ClipBoardTemp;
    SmsViewer smsViewer;
    final private int SMSWasSentIndex = 0;
    final private int SMSNumberIndex = 1;
    final private int SMSTextIndex = 2;
    final private int SMSSentIndex = 3;
    final private int SMSReceivedIndex = 4;
    int ActiveTAB;
    private String ext;
    private String fToSave;
    private FileWriters fileWriter = new FileWriters();

    /** Creates new form IpdDump_NewGUI */
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IpdChooser = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPopupMenuSMS = new javax.swing.JPopupMenu();
        jMenuItemTxt = new javax.swing.JMenuItem();
        jMenuItemXML = new javax.swing.JMenuItem();
        jMenuItemCSV = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelSMS = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSMS = new javax.swing.JTable();
        jPanelContacts = new javax.swing.JPanel();
        status_label1 = new javax.swing.JLabel();
        jPanelCalendar = new javax.swing.JPanel();
        status_label2 = new javax.swing.JLabel();
        jPanelTasks = new javax.swing.JPanel();
        status_label4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        status_label3 = new javax.swing.JLabel();
        status_label = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItemTxt.setText("View Plain in PlainText");
        jMenuItemTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTxtActionPerformed(evt);
            }
        });
        jPopupMenuSMS.add(jMenuItemTxt);

        jMenuItemXML.setText("View Plain in Xml");
        jMenuItemXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemXMLActionPerformed(evt);
            }
        });
        jPopupMenuSMS.add(jMenuItemXML);

        jMenuItemCSV.setText("View Plain in Csv");
        jMenuItemCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCSVActionPerformed(evt);
            }
        });
        jPopupMenuSMS.add(jMenuItemCSV);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IpdDump");
        setMinimumSize(new java.awt.Dimension(100, 500));

        jTableSMS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sent?", "Number", "Text", "Sent Date", "Received Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSMS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSMSMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableSMS);
        jTableSMS.getColumnModel().getColumn(0).setMinWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setMaxWidth(40);
        jTableSMS.getColumnModel().getColumn(1).setMaxWidth(130);
        jTableSMS.getColumnModel().getColumn(2).setMinWidth(150);
        jTableSMS.getColumnModel().getColumn(3).setMaxWidth(200);
        jTableSMS.getColumnModel().getColumn(4).setMaxWidth(200);

        javax.swing.GroupLayout jPanelSMSLayout = new javax.swing.GroupLayout(jPanelSMS);
        jPanelSMS.setLayout(jPanelSMSLayout);
        jPanelSMSLayout.setHorizontalGroup(
            jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
        );
        jPanelSMSLayout.setVerticalGroup(
            jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("SMS", jPanelSMS);

        status_label1.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label1.setText("Left Intentionally Blank");

        javax.swing.GroupLayout jPanelContactsLayout = new javax.swing.GroupLayout(jPanelContacts);
        jPanelContacts.setLayout(jPanelContactsLayout);
        jPanelContactsLayout.setHorizontalGroup(
            jPanelContactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContactsLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(status_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(235, 235, 235))
        );
        jPanelContactsLayout.setVerticalGroup(
            jPanelContactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContactsLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(status_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("Contacts", jPanelContacts);

        status_label2.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label2.setText("Left Intentionally Blank");

        javax.swing.GroupLayout jPanelCalendarLayout = new javax.swing.GroupLayout(jPanelCalendar);
        jPanelCalendar.setLayout(jPanelCalendarLayout);
        jPanelCalendarLayout.setHorizontalGroup(
            jPanelCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCalendarLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(status_label2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(202, 202, 202))
        );
        jPanelCalendarLayout.setVerticalGroup(
            jPanelCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCalendarLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(status_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("Calendar", jPanelCalendar);

        status_label4.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label4.setText("Left Intentionally Blank");

        javax.swing.GroupLayout jPanelTasksLayout = new javax.swing.GroupLayout(jPanelTasks);
        jPanelTasks.setLayout(jPanelTasksLayout);
        jPanelTasksLayout.setHorizontalGroup(
            jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTasksLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(status_label4, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(202, 202, 202))
        );
        jPanelTasksLayout.setVerticalGroup(
            jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTasksLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(status_label4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("Tasks", jPanelTasks);

        status_label3.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label3.setText("Left Intentionally Blank");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(status_label3, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(202, 202, 202))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(status_label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("Options", jPanel1);

        status_label.setFont(new java.awt.Font("Tahoma", 0, 12));
        status_label.setText("Welcome to IpdDump - http://code.google.com/p/ipddump/");

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");

        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(status_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(307, 307, 307))
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status_label)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-650)/2, (screenSize.height-508)/2, 650, 508);
    }// </editor-fold>//GEN-END:initComponents

    public IpdDump_NewGUI() {
        initComponents();
        smsViewer = new SmsViewer();
        IpdChooser.setAcceptAllFileFilterUsed(false);
        IpdChooser.setFileHidingEnabled(false);
        IpdChooser.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".IPD"}, "BB Backup Files Only"));

        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.setFileHidingEnabled(false);
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".cvs"}, "Cvs Document *.cvs"));
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".xml"}, "Xml Document *.xml"));
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".txt"}, "Text Document *.txt"));

        SMSDataModel = jTableSMS.getModel();
        SMStabINDEX = jTabbedPane1.indexOfTab("SMS");
        ContactstabINDEX = jTabbedPane1.indexOfTab("Contacts");
        CalendartabINDEX = jTabbedPane1.indexOfTab("Calendar");
        TaskstabINDEX = jTabbedPane1.indexOfTab("Tasks");
        OptionstabINDEX = jTabbedPane1.indexOfTab("Options");
        ActiveTAB = jTabbedPane1.getSelectedIndex();

        status_label.setText(welcome);
        saveAsMenuItem.setEnabled(false);
    }
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        //jTextArea1.setText(thnx+"\n\nWORKING...  be patient!");
        IpdChooser.setMultiSelectionEnabled(false);
        if (JFileChooser.APPROVE_OPTION == IpdChooser.showOpenDialog(null)) {


            path = IpdChooser.getSelectedFile().getAbsolutePath().toString();
            int last = path.lastIndexOf('.');
            pathString = path.substring(0, last);
            jFileChooser1.setSelectedFile(IpdChooser.getSelectedFile());


            String[] args = {IpdChooser.getSelectedFile().getPath()};

            //System.out.println(args[0]);
            Main.main(args);
            database = Main.db;

            if (database != null) {
                saveAsMenuItem.setEnabled(true);
            } else {
                saveAsMenuItem.setEnabled(false);
            }

            if (Main.getNumberOfSMS() != 0 && database != null) {
                fillSMSTable();
            } else {
                jTabbedPane1.setTitleAt(SMStabINDEX, "SMS(0)");

            // smsObj =  new Object [0][4];
            }
        }

    }//GEN-LAST:event_openMenuItemActionPerformed
    private void fillSMSTable() {

        //smsObj =  new Object [Main.getNumberOfSMS()][4];
        smsTablePrepair();
        //jTableSMS.setModel(SMSDataModel);
        jTabbedPane1.setTitleAt(SMStabINDEX, "SMS (" + Main.getNumberOfSMS() + ")");
        int i = 0;
        String sSent = "";
        ImageIcon received = new ImageIcon("img\\received.jpg");
        ImageIcon sent = new ImageIcon("img/sent.jpg");

        for (SMSMessage record : database.smsRecords()) {
            if (record.wasSent()) {
                sSent = "true";
            } else {
                sSent = "false";
            }
            SMSDataModel.setValueAt(sSent, i, SMSWasSentIndex);
            SMSDataModel.setValueAt(record.getNumber(), i, SMSNumberIndex);
            SMSDataModel.setValueAt(record.getText(), i, SMSTextIndex);
            SMSDataModel.setValueAt(record.getSent().toString(), i, SMSSentIndex);
            SMSDataModel.setValueAt(record.getReceived().toString(), i, SMSReceivedIndex);
//    SMSDataModel.setValueAt(record.getUID(), i, 4);
            i++;//Go to next Line in the table
        }
    }
private void ShowSMSPopup(MouseEvent e) {
            jPopupMenuSMS.show(e.getComponent(),
                       e.getX(), e.getY());
}

    private void jTableSMSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSMSMouseClicked
        int[] SMSselectedRows = jTableSMS.getSelectedRows();
        if (evt.getButton() == MouseEvent.BUTTON3 && SMSselectedRows.length>0) {
            System.out.println("right click");
           // String tmpCvs =
            ShowSMSPopup(evt);

        }else{
            if (evt.getButton() == MouseEvent.BUTTON3 && SMSselectedRows.length==0){
                JOptionPane.showMessageDialog(jFrame1, "Select the Messages you want to View");
            }
        }
        if (evt.getClickCount() == 2) {
            System.out.println("double click");
            //SMStoPlainText(SMSselectedRows);
        }
//jFrame1.setVisible(true);
}//GEN-LAST:event_jTableSMSMouseClicked

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        int[] SMSselectedRows = jTableSMS.getSelectedRows();
        ActiveTAB = jTabbedPane1.getSelectedIndex();


        if (ActiveTAB == SMStabINDEX && Main.getNumberOfSMS() != 0 && SMSselectedRows.length > 0) {
            if (saveDialog()) {
                if (ext.equalsIgnoreCase("txt")) {
                    fileWriter.writeTxttoFile(fToSave, SMStoPlainText(SMSselectedRows));
                } else if (ext.equalsIgnoreCase("cvs")) {
                    fileWriter.writeTxttoFile(fToSave, Main.getSMStoString());
                } else if (ext.equalsIgnoreCase("xml")) {
                    fileWriter.writeXMLtoFile(fToSave, SmsMessageToXML.createSmsMessageToXML(database, SMSselectedRows));
                }
            }
        } else {
            JOptionPane.showMessageDialog(jFrame1, "Select the items you want to save");
        }


    }//GEN-LAST:event_saveAsMenuItemActionPerformed
    private boolean saveDialog() {
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showSaveDialog(null)) {

            int lastDot = jFileChooser1.getFileFilter().getDescription().lastIndexOf(".") + 1;
            ext = jFileChooser1.getFileFilter().getDescription().substring(lastDot);
            fToSave = jFileChooser1.getSelectedFile().getAbsolutePath() + "." + ext;
//System.out.println(fToSave+" - "+ext);
            return true;
        }
        return false;
    }
    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        setClipboardContents(ClipBoardTemp);
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void jMenuItemXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemXMLActionPerformed
        int[] SMSselectedRows = jTableSMS.getSelectedRows();
         String tmpXml = SmsMessageToXML.createSmsMessageToXML(database, SMSselectedRows).asXML();
                smsViewer.setXml(tmpXml);
                smsViewer.setVisible(true);
}//GEN-LAST:event_jMenuItemXMLActionPerformed

    private void jMenuItemTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTxtActionPerformed
        int[] SMSselectedRows = jTableSMS.getSelectedRows();
        String tmp = SMStoPlainText(SMSselectedRows);
                smsViewer.setTxt(tmp);
                smsViewer.setVisible(true);
    }//GEN-LAST:event_jMenuItemTxtActionPerformed

    private void jMenuItemCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCSVActionPerformed
    int[] SMSselectedRows = jTableSMS.getSelectedRows();
        String tmp = SMStoPlainText(SMSselectedRows);
                smsViewer.setTxt(tmp);
                smsViewer.setVisible(true);
    }//GEN-LAST:event_jMenuItemCSVActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new IpdDump_NewGUI().setVisible(true);
//            }
//        });
//    }
    private void smsTablePrepair() {
        jTableSMS.setModel(new javax.swing.table.DefaultTableModel(
                new Object[Main.getNumberOfSMS()][4],
                new String[]{
                    "Sent?", "Number", "Text", "Sent Date", "Received Date"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        jScrollPane1.setViewportView(jTableSMS);
        jTableSMS.getColumnModel().getColumn(0).setMinWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setMaxWidth(40);
        jTableSMS.getColumnModel().getColumn(1).setMaxWidth(130);
        jTableSMS.getColumnModel().getColumn(2).setMinWidth(150);
        jTableSMS.getColumnModel().getColumn(3).setMaxWidth(200);
        jTableSMS.getColumnModel().getColumn(4).setMaxWidth(200);

        javax.swing.GroupLayout jPanelSMSLayout = new javax.swing.GroupLayout(jPanelSMS);
        jPanelSMS.setLayout(jPanelSMSLayout);
        jPanelSMSLayout.setHorizontalGroup(
                jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE));
        jPanelSMSLayout.setVerticalGroup(
                jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE));

        SMSDataModel = jTableSMS.getModel();
    }

    public void setClipboardContents(String aString) {
        StringSelection stringSelection = new StringSelection(aString);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, (ClipboardOwner) null);
    }

    private String SMStoPlainText(int[] SMSselectedRows) {
        String temp = "";

        for (int i : SMSselectedRows) {
            String wasSent = (String) SMSDataModel.getValueAt(i, SMSWasSentIndex);
            String number = (String) SMSDataModel.getValueAt(i, SMSNumberIndex);
            String text = (String) SMSDataModel.getValueAt(i, SMSTextIndex);
            String sent = (String) SMSDataModel.getValueAt(i, SMSSentIndex);
            String recieved = (String) SMSDataModel.getValueAt(i, SMSReceivedIndex);
            if (wasSent.equalsIgnoreCase("false")) {
                temp = temp + "From: " + number + "\nTo: My Phone\nSent: " + sent + "\nReceived: " + recieved + "\nText:\n" + text + "\n\n";
            } else {
                temp = temp + "From: My Phone\nTo: " + number + "\nSent: " + sent + "\nReceived: " + recieved + "\nText:\n" + text + "\n\n";
            }

        }
        System.out.println(temp);
        ClipBoardTemp = temp;
        return temp;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser IpdChooser;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenuItem jMenuItemCSV;
    private javax.swing.JMenuItem jMenuItemTxt;
    private javax.swing.JMenuItem jMenuItemXML;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCalendar;
    private javax.swing.JPanel jPanelContacts;
    private javax.swing.JPanel jPanelSMS;
    private javax.swing.JPanel jPanelTasks;
    private javax.swing.JPopupMenu jPopupMenuSMS;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableSMS;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JLabel status_label;
    private javax.swing.JLabel status_label1;
    private javax.swing.JLabel status_label2;
    private javax.swing.JLabel status_label3;
    private javax.swing.JLabel status_label4;
    // End of variables declaration//GEN-END:variables
}
