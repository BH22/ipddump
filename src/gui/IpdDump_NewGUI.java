
/*
 * IpdDump_NewGUI.java
 *
 * Created on 10 Ιουν 2009, 11:50:15 πμ
 */
package gui;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseEvent;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import org.quaternions.ipddump.*;
import org.quaternions.ipddump.data.*;
import org.quaternions.ipddump.writers.FileWriters;
import org.quaternions.ipddump.writers.SmsWriters;

/**
 *
 * @author Jimmys Daskalakis
 */
public class IpdDump_NewGUI extends javax.swing.JFrame {

    private String path;
    private String pathString;
    private String welcome = "Welcome to IpdDump - http://code.google.com/p/ipddump/";
    private String ClipBoardTemp;
    private String ext;
    private String fToSave;
    private InteractivePagerBackup database;
    private TableModel SMSDataModel;
    private int SMStabINDEX;
    private int ContactstabINDEX;
    private int CalendartabINDEX;
    private int TaskstabINDEX;
    private int OptionstabINDEX;
    final private int SMSWasSentIndex = 0;
    final private int SMSNumberIndex = 1;
    final private int SMSTextIndex = 2;
    final private int SMSSentIndex = 3;
    final private int SMSReceivedIndex = 4;
    private int ActiveTAB;
    private int totalSMS = 0;
    private int[] SMSSelectedRows;
    private int totalContacts = 0;
    private int[] ContactsSelectedRows;
    private int totalCalendar = 0;
    private int[] CalendarSelectedRows;
    private int totalTasks = 0;
    private int[] TasksSelectedRows;
    private int totalOptions = 0;
    private int[] OptionsSelectedRows;
    private DataViewer viewer;
    private FileWriters fileWriter = new FileWriters();
    private SmsWriters smsWriter;

    /** Creates new form IpdDump_NewGUI */
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IpdChooser = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPopupMenuSMS = new javax.swing.JPopupMenu();
        jMenuItemSMSTxt = new javax.swing.JMenuItem();
        jMenuItemSMSXML = new javax.swing.JMenuItem();
        jMenuItemSMSCSV = new javax.swing.JMenuItem();
        jMenuSMS = new javax.swing.JMenu();
        jMenuItemSMSCPTXT = new javax.swing.JMenuItem();
        jMenuItemSMSCPXML = new javax.swing.JMenuItem();
        jMenuItemSMSCPCSV = new javax.swing.JMenuItem();
        jPopupMenuContacts = new javax.swing.JPopupMenu();
        jMenuItemContactsTxt = new javax.swing.JMenuItem();
        jMenuItemContactsXML = new javax.swing.JMenuItem();
        jMenuItemContactsCSV = new javax.swing.JMenuItem();
        jMenuContacts = new javax.swing.JMenu();
        jMenuItemContactsCPTXT = new javax.swing.JMenuItem();
        jMenuItemContactsCPXML = new javax.swing.JMenuItem();
        jMenuItemContactsCPCSV = new javax.swing.JMenuItem();
        jPopupMenuCalendar = new javax.swing.JPopupMenu();
        jMenuItemCalendarTxt = new javax.swing.JMenuItem();
        jMenuItemCalendarXML = new javax.swing.JMenuItem();
        jMenuItemCalendarCSV = new javax.swing.JMenuItem();
        jMenuCalendar = new javax.swing.JMenu();
        jMenuItemCalendarCPTXT = new javax.swing.JMenuItem();
        jMenuItemCalendarCPXML = new javax.swing.JMenuItem();
        jMenuItemCalendarCPCSV = new javax.swing.JMenuItem();
        jPopupMenuTasks = new javax.swing.JPopupMenu();
        jMenuItemTasksTxt = new javax.swing.JMenuItem();
        jMenuItemTasksXML = new javax.swing.JMenuItem();
        jMenuItemTasksCSV = new javax.swing.JMenuItem();
        jMenuTasks = new javax.swing.JMenu();
        jMenuItemTasksCPTXT = new javax.swing.JMenuItem();
        jMenuItemTasksCPXML = new javax.swing.JMenuItem();
        jMenuItemTasksCPCSV = new javax.swing.JMenuItem();
        jPopupMenuOptions = new javax.swing.JPopupMenu();
        jMenuItemOptionsTxt = new javax.swing.JMenuItem();
        jMenuItemOptionsXML = new javax.swing.JMenuItem();
        jMenuItemOptionsCSV = new javax.swing.JMenuItem();
        jMenuOptions = new javax.swing.JMenu();
        jMenuItemOptionsCPTXT = new javax.swing.JMenuItem();
        jMenuItemOptionsCPXML = new javax.swing.JMenuItem();
        jMenuItemOptionsCPCSV = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelSMS = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSMS = new javax.swing.JTable();
        jPanelContacts = new javax.swing.JPanel();
        status_label1 = new javax.swing.JLabel();
        jPanelCalendar = new javax.swing.JPanel();
        status_label2 = new javax.swing.JLabel();
        jPanelTasks = new javax.swing.JPanel();
        status_label4 = new javax.swing.JLabel();
        jPanelOptions = new javax.swing.JPanel();
        status_label3 = new javax.swing.JLabel();
        status_label = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItemSMSTxt.setText("View in PlainText");
        jMenuItemSMSTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSMSTxtActionPerformed(evt);
            }
        });
        jPopupMenuSMS.add(jMenuItemSMSTxt);

        jMenuItemSMSXML.setText("View in Xml");
        jMenuItemSMSXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSMSXMLActionPerformed(evt);
            }
        });
        jPopupMenuSMS.add(jMenuItemSMSXML);

        jMenuItemSMSCSV.setText("View in Csv");
        jMenuItemSMSCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSMSCSVActionPerformed(evt);
            }
        });
        jPopupMenuSMS.add(jMenuItemSMSCSV);

        jMenuSMS.setText("Copy in-->");

        jMenuItemSMSCPTXT.setText("Plain Text");
        jMenuItemSMSCPTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSMSCPTXTActionPerformed(evt);
            }
        });
        jMenuSMS.add(jMenuItemSMSCPTXT);

        jMenuItemSMSCPXML.setText("XML");
        jMenuItemSMSCPXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSMSCPXMLActionPerformed(evt);
            }
        });
        jMenuSMS.add(jMenuItemSMSCPXML);

        jMenuItemSMSCPCSV.setText("CSV");
        jMenuItemSMSCPCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSMSCPCSVActionPerformed(evt);
            }
        });
        jMenuSMS.add(jMenuItemSMSCPCSV);

        jPopupMenuSMS.add(jMenuSMS);

        jMenuItemContactsTxt.setText("View in PlainText");
        jMenuItemContactsTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContactsTxtActionPerformed(evt);
            }
        });
        jPopupMenuContacts.add(jMenuItemContactsTxt);

        jMenuItemContactsXML.setText("View in Xml");
        jMenuItemContactsXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContactsXMLActionPerformed(evt);
            }
        });
        jPopupMenuContacts.add(jMenuItemContactsXML);

        jMenuItemContactsCSV.setText("View in Csv");
        jMenuItemContactsCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContactsCSVActionPerformed(evt);
            }
        });
        jPopupMenuContacts.add(jMenuItemContactsCSV);

        jMenuContacts.setText("Copy in-->");

        jMenuItemContactsCPTXT.setText("Plain Text");
        jMenuItemContactsCPTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContactsCPTXTActionPerformed(evt);
            }
        });
        jMenuContacts.add(jMenuItemContactsCPTXT);

        jMenuItemContactsCPXML.setText("XML");
        jMenuItemContactsCPXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContactsCPXMLActionPerformed(evt);
            }
        });
        jMenuContacts.add(jMenuItemContactsCPXML);

        jMenuItemContactsCPCSV.setText("CSV");
        jMenuItemContactsCPCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContactsCPCSVActionPerformed(evt);
            }
        });
        jMenuContacts.add(jMenuItemContactsCPCSV);

        jPopupMenuContacts.add(jMenuContacts);

        jMenuItemCalendarTxt.setText("View in PlainText");
        jMenuItemCalendarTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCalendarTxtActionPerformed(evt);
            }
        });
        jPopupMenuCalendar.add(jMenuItemCalendarTxt);

        jMenuItemCalendarXML.setText("View in Xml");
        jMenuItemCalendarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCalendarXMLActionPerformed(evt);
            }
        });
        jPopupMenuCalendar.add(jMenuItemCalendarXML);

        jMenuItemCalendarCSV.setText("View in Csv");
        jMenuItemCalendarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCalendarCSVActionPerformed(evt);
            }
        });
        jPopupMenuCalendar.add(jMenuItemCalendarCSV);

        jMenuCalendar.setText("Copy in-->");

        jMenuItemCalendarCPTXT.setText("Plain Text");
        jMenuItemCalendarCPTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCalendarCPTXTActionPerformed(evt);
            }
        });
        jMenuCalendar.add(jMenuItemCalendarCPTXT);

        jMenuItemCalendarCPXML.setText("XML");
        jMenuItemCalendarCPXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCalendarCPXMLActionPerformed(evt);
            }
        });
        jMenuCalendar.add(jMenuItemCalendarCPXML);

        jMenuItemCalendarCPCSV.setText("CSV");
        jMenuItemCalendarCPCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCalendarCPCSVActionPerformed(evt);
            }
        });
        jMenuCalendar.add(jMenuItemCalendarCPCSV);

        jPopupMenuCalendar.add(jMenuCalendar);

        jMenuItemTasksTxt.setText("View in PlainText");
        jMenuItemTasksTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTasksTxtActionPerformed(evt);
            }
        });
        jPopupMenuTasks.add(jMenuItemTasksTxt);

        jMenuItemTasksXML.setText("View in Xml");
        jMenuItemTasksXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTasksXMLActionPerformed(evt);
            }
        });
        jPopupMenuTasks.add(jMenuItemTasksXML);

        jMenuItemTasksCSV.setText("View in Csv");
        jMenuItemTasksCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTasksCSVActionPerformed(evt);
            }
        });
        jPopupMenuTasks.add(jMenuItemTasksCSV);

        jMenuTasks.setText("Copy in-->");

        jMenuItemTasksCPTXT.setText("Plain Text");
        jMenuItemTasksCPTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTasksCPTXTActionPerformed(evt);
            }
        });
        jMenuTasks.add(jMenuItemTasksCPTXT);

        jMenuItemTasksCPXML.setText("XML");
        jMenuItemTasksCPXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTasksCPXMLActionPerformed(evt);
            }
        });
        jMenuTasks.add(jMenuItemTasksCPXML);

        jMenuItemTasksCPCSV.setText("CSV");
        jMenuItemTasksCPCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTasksCPCSVActionPerformed(evt);
            }
        });
        jMenuTasks.add(jMenuItemTasksCPCSV);

        jPopupMenuTasks.add(jMenuTasks);

        jMenuItemOptionsTxt.setText("View in PlainText");
        jMenuItemOptionsTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOptionsTxtActionPerformed(evt);
            }
        });
        jPopupMenuOptions.add(jMenuItemOptionsTxt);

        jMenuItemOptionsXML.setText("View in Xml");
        jMenuItemOptionsXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOptionsXMLActionPerformed(evt);
            }
        });
        jPopupMenuOptions.add(jMenuItemOptionsXML);

        jMenuItemOptionsCSV.setText("View in Csv");
        jMenuItemOptionsCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOptionsCSVActionPerformed(evt);
            }
        });
        jPopupMenuOptions.add(jMenuItemOptionsCSV);

        jMenuOptions.setText("Copy in-->");

        jMenuItemOptionsCPTXT.setText("Plain Text");
        jMenuItemOptionsCPTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOptionsCPTXTActionPerformed(evt);
            }
        });
        jMenuOptions.add(jMenuItemOptionsCPTXT);

        jMenuItemOptionsCPXML.setText("XML");
        jMenuItemOptionsCPXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOptionsCPXMLActionPerformed(evt);
            }
        });
        jMenuOptions.add(jMenuItemOptionsCPXML);

        jMenuItemOptionsCPCSV.setText("CSV");
        jMenuItemOptionsCPCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOptionsCPCSVActionPerformed(evt);
            }
        });
        jMenuOptions.add(jMenuItemOptionsCPCSV);

        jPopupMenuOptions.add(jMenuOptions);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IpdDump");
        setMinimumSize(new java.awt.Dimension(100, 500));

        jTableSMS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sent?", "Number", "Text", "Sent Date", "Received Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSMS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSMSMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableSMS);
        jTableSMS.getColumnModel().getColumn(0).setMinWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setMaxWidth(40);
        jTableSMS.getColumnModel().getColumn(1).setMaxWidth(130);
        jTableSMS.getColumnModel().getColumn(2).setMinWidth(150);
        jTableSMS.getColumnModel().getColumn(3).setMaxWidth(200);
        jTableSMS.getColumnModel().getColumn(4).setMaxWidth(200);

        javax.swing.GroupLayout jPanelSMSLayout = new javax.swing.GroupLayout(jPanelSMS);
        jPanelSMS.setLayout(jPanelSMSLayout);
        jPanelSMSLayout.setHorizontalGroup(
            jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
        );
        jPanelSMSLayout.setVerticalGroup(
            jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("SMS", jPanelSMS);

        status_label1.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label1.setText("Left Intentionally Blank");

        javax.swing.GroupLayout jPanelContactsLayout = new javax.swing.GroupLayout(jPanelContacts);
        jPanelContacts.setLayout(jPanelContactsLayout);
        jPanelContactsLayout.setHorizontalGroup(
            jPanelContactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContactsLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(status_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(235, 235, 235))
        );
        jPanelContactsLayout.setVerticalGroup(
            jPanelContactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContactsLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(status_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("Contacts", jPanelContacts);

        status_label2.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label2.setText("Left Intentionally Blank");

        javax.swing.GroupLayout jPanelCalendarLayout = new javax.swing.GroupLayout(jPanelCalendar);
        jPanelCalendar.setLayout(jPanelCalendarLayout);
        jPanelCalendarLayout.setHorizontalGroup(
            jPanelCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCalendarLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(status_label2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(202, 202, 202))
        );
        jPanelCalendarLayout.setVerticalGroup(
            jPanelCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCalendarLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(status_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("Calendar", jPanelCalendar);

        status_label4.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label4.setText("Left Intentionally Blank");

        javax.swing.GroupLayout jPanelTasksLayout = new javax.swing.GroupLayout(jPanelTasks);
        jPanelTasks.setLayout(jPanelTasksLayout);
        jPanelTasksLayout.setHorizontalGroup(
            jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTasksLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(status_label4, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(202, 202, 202))
        );
        jPanelTasksLayout.setVerticalGroup(
            jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTasksLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(status_label4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("Tasks", jPanelTasks);

        status_label3.setFont(new java.awt.Font("Tahoma", 0, 18));
        status_label3.setText("Left Intentionally Blank");

        javax.swing.GroupLayout jPanelOptionsLayout = new javax.swing.GroupLayout(jPanelOptions);
        jPanelOptions.setLayout(jPanelOptionsLayout);
        jPanelOptionsLayout.setHorizontalGroup(
            jPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelOptionsLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(status_label3, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(202, 202, 202))
        );
        jPanelOptionsLayout.setVerticalGroup(
            jPanelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelOptionsLayout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(status_label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("Options", jPanelOptions);

        status_label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        status_label.setText("Welcome to IpdDump - http://code.google.com/p/ipddump/");

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save Selected As ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");

        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(status_label, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status_label)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-650)/2, (screenSize.height-508)/2, 650, 508);
    }// </editor-fold>//GEN-END:initComponents

    public IpdDump_NewGUI() {
        initComponents();
        viewer = new DataViewer();
        IpdChooser.setAcceptAllFileFilterUsed(false);
        IpdChooser.setFileHidingEnabled(false);
        IpdChooser.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".IPD"}, "BB Backup Files"));

        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.setFileHidingEnabled(false);
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".cvs"}, "Cvs Document *.cvs"));
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".xml"}, "Xml Document *.xml"));
        jFileChooser1.addChoosableFileFilter(
                new ExtensionFileFilter(
                new String[]{".txt"}, "Text Document *.txt"));

        SMSDataModel = jTableSMS.getModel();
        SMStabINDEX = jTabbedPane1.indexOfTab("SMS");
        ContactstabINDEX = jTabbedPane1.indexOfTab("Contacts");
        CalendartabINDEX = jTabbedPane1.indexOfTab("Calendar");
        TaskstabINDEX = jTabbedPane1.indexOfTab("Tasks");
        OptionstabINDEX = jTabbedPane1.indexOfTab("Options");
        ActiveTAB = jTabbedPane1.getSelectedIndex();

        status_label.setText(welcome);
        saveAsMenuItem.setEnabled(false);
    }
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        //jTextArea1.setText(thnx+"\n\nWORKING...  be patient!");
        IpdChooser.setMultiSelectionEnabled(false);
        if (JFileChooser.APPROVE_OPTION == IpdChooser.showOpenDialog(null)) {


            path = IpdChooser.getSelectedFile().getAbsolutePath().toString();
            int last = path.lastIndexOf('.');
            pathString = path.substring(0, last);
            jFileChooser1.setSelectedFile(IpdChooser.getSelectedFile());


            String[] args = {IpdChooser.getSelectedFile().getPath()};
            try {
                database = new IPDParser(args[0]).parse();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(jFrame1, "ERROR: " + ex.getMessage());
                saveAsMenuItem.setEnabled(false);
            }
            smsWriter = new SmsWriters(database);
            totalSMS = smsWriter.getNumberOfSMS();

            if (database != null) {
                saveAsMenuItem.setEnabled(true);
            } else {
                saveAsMenuItem.setEnabled(false);
            }

            fillSMSTable();
        }

    }//GEN-LAST:event_openMenuItemActionPerformed
    private void fillSMSTable() {

        smsTablePrepair();
        jTabbedPane1.setTitleAt(SMStabINDEX, "SMS (" + totalSMS + ")");
        int i = 0;
        String sSent = "";

        for (SMSMessage record : database.smsRecords()) {
            if (record.wasSent()) {
                sSent = "true";
            } else {
                sSent = "false";
            }
            SMSDataModel.setValueAt(sSent, i, SMSWasSentIndex);
            SMSDataModel.setValueAt(record.getNumber(), i, SMSNumberIndex);
            SMSDataModel.setValueAt(record.getText(), i, SMSTextIndex);
            SMSDataModel.setValueAt(record.getSent().toString(), i, SMSSentIndex);
            SMSDataModel.setValueAt(record.getReceived().toString(), i, SMSReceivedIndex);
            i++;//Go to next Line in the table
        }
    }

    private void ShowSMSPopup(MouseEvent e) {
        jPopupMenuSMS.show(e.getComponent(),
                e.getX(), e.getY());
    }

    private void ShowContactsPopup(MouseEvent e) {
        jPopupMenuContacts.show(e.getComponent(),
                e.getX(), e.getY());
    }

    private void ShowTasksPopup(MouseEvent e) {
        jPopupMenuTasks.show(e.getComponent(),
                e.getX(), e.getY());
    }

    private void ShowCalendarPopup(MouseEvent e) {
        jPopupMenuCalendar.show(e.getComponent(),
                e.getX(), e.getY());
    }

    private void ShowOptionsPopup(MouseEvent e) {
        jPopupMenuOptions.show(e.getComponent(),
                e.getX(), e.getY());
    }

    private void jTableSMSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSMSMouseClicked
        SMSSelectedRows = jTableSMS.getSelectedRows();
        if (evt.getButton() == MouseEvent.BUTTON3 && SMSSelectedRows.length > 0) {
            //System.out.println("right click");
            ShowSMSPopup(evt);

        } else {
            if (evt.getButton() == MouseEvent.BUTTON3 && SMSSelectedRows.length == 0) {
                JOptionPane.showMessageDialog(jFrame1, "Select the Messages you want to View");
            }
        }
        if (evt.getClickCount() == 2) {
            //System.out.println("double click");
        }
}//GEN-LAST:event_jTableSMSMouseClicked

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        SMSSelectedRows = jTableSMS.getSelectedRows();
        ActiveTAB = jTabbedPane1.getSelectedIndex();


        if (ActiveTAB == SMStabINDEX && totalSMS != 0 && SMSSelectedRows.length > 0) {
            if (saveDialog()) {
                if (ext.equalsIgnoreCase("txt")) {
                    fileWriter.writeTxtToFile(fToSave, smsWriter.SMSToPlainText(SMSSelectedRows));
                } else if (ext.equalsIgnoreCase("cvs")) {
                    fileWriter.writeTxtToFile(fToSave, smsWriter.SMSToCVS(SMSSelectedRows));
                } else if (ext.equalsIgnoreCase("xml")) {
                    fileWriter.writeXMLtoFile(fToSave, smsWriter.SMSToXML(SMSSelectedRows));
                }
            }
        } else {
            JOptionPane.showMessageDialog(jFrame1, "Select the items you want to save");
        }


    }//GEN-LAST:event_saveAsMenuItemActionPerformed
    private boolean saveDialog() {
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showSaveDialog(null)) {

            int lastDot = jFileChooser1.getFileFilter().getDescription().lastIndexOf(".") + 1;
            ext = jFileChooser1.getFileFilter().getDescription().substring(lastDot);
            fToSave = jFileChooser1.getSelectedFile().getAbsolutePath() + "." + ext;
            //System.out.println(fToSave+" - "+ext);
            return true;
        }
        return false;
    }
    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        setClipboardContents(ClipBoardTemp);
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void jMenuItemSMSXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSMSXMLActionPerformed
        String tmpXml = smsWriter.SMSToXML(SMSSelectedRows).asXML();
        viewer.setXml(tmpXml);
        viewer.setTitle("SMS Viewer - XML");
        viewer.setVisible(true);
}//GEN-LAST:event_jMenuItemSMSXMLActionPerformed

    private void jMenuItemSMSTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSMSTxtActionPerformed
        String tmp = smsWriter.SMSToPlainText(SMSSelectedRows);
        viewer.setTxt(tmp);
        viewer.setTitle("SMS Viewer - Plain Text");
        viewer.setVisible(true);
}//GEN-LAST:event_jMenuItemSMSTxtActionPerformed

    private void jMenuItemSMSCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSMSCSVActionPerformed
        String tmp = smsWriter.SMSToCVS(SMSSelectedRows);
        viewer.setCvs(tmp);
        viewer.setTitle("SMS Viewer - Csv");
        viewer.setVisible(true);
}//GEN-LAST:event_jMenuItemSMSCSVActionPerformed

    private void jMenuItemSMSCPTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSMSCPTXTActionPerformed
        String tmp = smsWriter.SMSToPlainText(SMSSelectedRows);
        setClipboardContents(tmp);
}//GEN-LAST:event_jMenuItemSMSCPTXTActionPerformed

    private void jMenuItemSMSCPXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSMSCPXMLActionPerformed
        String tmp = smsWriter.SMSToXML(SMSSelectedRows).asXML();
        setClipboardContents(tmp);
}//GEN-LAST:event_jMenuItemSMSCPXMLActionPerformed

    private void jMenuItemSMSCPCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSMSCPCSVActionPerformed
        String tmp = smsWriter.SMSToCVS(SMSSelectedRows);
        setClipboardContents(tmp);
}//GEN-LAST:event_jMenuItemSMSCPCSVActionPerformed

    private void jMenuItemContactsTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContactsTxtActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemContactsTxtActionPerformed

    private void jMenuItemContactsXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContactsXMLActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemContactsXMLActionPerformed

    private void jMenuItemContactsCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContactsCSVActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemContactsCSVActionPerformed

    private void jMenuItemContactsCPTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContactsCPTXTActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemContactsCPTXTActionPerformed

    private void jMenuItemContactsCPXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContactsCPXMLActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemContactsCPXMLActionPerformed

    private void jMenuItemContactsCPCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContactsCPCSVActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemContactsCPCSVActionPerformed

    private void jMenuItemCalendarTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCalendarTxtActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemCalendarTxtActionPerformed

    private void jMenuItemCalendarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCalendarXMLActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemCalendarXMLActionPerformed

    private void jMenuItemCalendarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCalendarCSVActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemCalendarCSVActionPerformed

    private void jMenuItemCalendarCPTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCalendarCPTXTActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemCalendarCPTXTActionPerformed

    private void jMenuItemCalendarCPXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCalendarCPXMLActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemCalendarCPXMLActionPerformed

    private void jMenuItemCalendarCPCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCalendarCPCSVActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemCalendarCPCSVActionPerformed

    private void jMenuItemTasksTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTasksTxtActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemTasksTxtActionPerformed

    private void jMenuItemTasksXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTasksXMLActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemTasksXMLActionPerformed

    private void jMenuItemTasksCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTasksCSVActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemTasksCSVActionPerformed

    private void jMenuItemTasksCPTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTasksCPTXTActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemTasksCPTXTActionPerformed

    private void jMenuItemTasksCPXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTasksCPXMLActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemTasksCPXMLActionPerformed

    private void jMenuItemTasksCPCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTasksCPCSVActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemTasksCPCSVActionPerformed

    private void jMenuItemOptionsTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOptionsTxtActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemOptionsTxtActionPerformed

    private void jMenuItemOptionsXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOptionsXMLActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemOptionsXMLActionPerformed

    private void jMenuItemOptionsCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOptionsCSVActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemOptionsCSVActionPerformed

    private void jMenuItemOptionsCPTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOptionsCPTXTActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemOptionsCPTXTActionPerformed

    private void jMenuItemOptionsCPXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOptionsCPXMLActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemOptionsCPXMLActionPerformed

    private void jMenuItemOptionsCPCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOptionsCPCSVActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItemOptionsCPCSVActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new IpdDump_NewGUI().setVisible(true);
//            }
//        });
//    }
    // <editor-fold defaultstate="collapsed" desc="Table Prepair Code - - NEED TO find alternative way of doing this??">
    private void smsTablePrepair() {
        jTableSMS.setModel(new javax.swing.table.DefaultTableModel(
                new Object[totalSMS][4],
                new String[]{
                    "Sent?", "Number", "Text", "Sent Date", "Received Date"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        jScrollPane1.setViewportView(jTableSMS);
        jTableSMS.getColumnModel().getColumn(0).setMinWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableSMS.getColumnModel().getColumn(0).setMaxWidth(40);
        jTableSMS.getColumnModel().getColumn(1).setMaxWidth(130);
        jTableSMS.getColumnModel().getColumn(2).setMinWidth(150);
        jTableSMS.getColumnModel().getColumn(3).setMaxWidth(200);
        jTableSMS.getColumnModel().getColumn(4).setMaxWidth(200);

        javax.swing.GroupLayout jPanelSMSLayout = new javax.swing.GroupLayout(jPanelSMS);
        jPanelSMS.setLayout(jPanelSMSLayout);
        jPanelSMSLayout.setHorizontalGroup(
                jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE));
        jPanelSMSLayout.setVerticalGroup(
                jPanelSMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE));

        SMSDataModel = jTableSMS.getModel();
    }// </editor-fold> 

    public static void setClipboardContents(String aString) {
        StringSelection stringSelection = new StringSelection(aString);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, (ClipboardOwner) null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser IpdChooser;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenu jMenuCalendar;
    private javax.swing.JMenu jMenuContacts;
    private javax.swing.JMenuItem jMenuItemCalendarCPCSV;
    private javax.swing.JMenuItem jMenuItemCalendarCPTXT;
    private javax.swing.JMenuItem jMenuItemCalendarCPXML;
    private javax.swing.JMenuItem jMenuItemCalendarCSV;
    private javax.swing.JMenuItem jMenuItemCalendarTxt;
    private javax.swing.JMenuItem jMenuItemCalendarXML;
    private javax.swing.JMenuItem jMenuItemContactsCPCSV;
    private javax.swing.JMenuItem jMenuItemContactsCPTXT;
    private javax.swing.JMenuItem jMenuItemContactsCPXML;
    private javax.swing.JMenuItem jMenuItemContactsCSV;
    private javax.swing.JMenuItem jMenuItemContactsTxt;
    private javax.swing.JMenuItem jMenuItemContactsXML;
    private javax.swing.JMenuItem jMenuItemOptionsCPCSV;
    private javax.swing.JMenuItem jMenuItemOptionsCPTXT;
    private javax.swing.JMenuItem jMenuItemOptionsCPXML;
    private javax.swing.JMenuItem jMenuItemOptionsCSV;
    private javax.swing.JMenuItem jMenuItemOptionsTxt;
    private javax.swing.JMenuItem jMenuItemOptionsXML;
    private javax.swing.JMenuItem jMenuItemSMSCPCSV;
    private javax.swing.JMenuItem jMenuItemSMSCPTXT;
    private javax.swing.JMenuItem jMenuItemSMSCPXML;
    private javax.swing.JMenuItem jMenuItemSMSCSV;
    private javax.swing.JMenuItem jMenuItemSMSTxt;
    private javax.swing.JMenuItem jMenuItemSMSXML;
    private javax.swing.JMenuItem jMenuItemTasksCPCSV;
    private javax.swing.JMenuItem jMenuItemTasksCPTXT;
    private javax.swing.JMenuItem jMenuItemTasksCPXML;
    private javax.swing.JMenuItem jMenuItemTasksCSV;
    private javax.swing.JMenuItem jMenuItemTasksTxt;
    private javax.swing.JMenuItem jMenuItemTasksXML;
    private javax.swing.JMenu jMenuOptions;
    private javax.swing.JMenu jMenuSMS;
    private javax.swing.JMenu jMenuTasks;
    private javax.swing.JPanel jPanelCalendar;
    private javax.swing.JPanel jPanelContacts;
    private javax.swing.JPanel jPanelOptions;
    private javax.swing.JPanel jPanelSMS;
    private javax.swing.JPanel jPanelTasks;
    private javax.swing.JPopupMenu jPopupMenuCalendar;
    private javax.swing.JPopupMenu jPopupMenuContacts;
    private javax.swing.JPopupMenu jPopupMenuOptions;
    private javax.swing.JPopupMenu jPopupMenuSMS;
    private javax.swing.JPopupMenu jPopupMenuTasks;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableSMS;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JLabel status_label;
    private javax.swing.JLabel status_label1;
    private javax.swing.JLabel status_label2;
    private javax.swing.JLabel status_label3;
    private javax.swing.JLabel status_label4;
    // End of variables declaration//GEN-END:variables
}
