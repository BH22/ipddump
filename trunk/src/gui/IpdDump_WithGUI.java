package gui;


import org.quaternions.ipddump.Main;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IpdDump.java
 *
 * Created on 27 Μαϊ 2009, 12:12:24 μμ
 */

/**
 *
 * @author Jimmys Daskalakis
 */
public class IpdDump_WithGUI extends javax.swing.JFrame {
    String string;
    String pathString;
    static String thnx = "Give your Thanks to\n\n Jimmys:" +
            " jimdaskalakis01@gmail.com\n and basically TO -----> http:" +
            "//code.google.com/p/ipddump/wiki/Main<----- for the core source code" +
            "\n\n Next to do: Unicode Support";

    static String chglog="\n\n--------------------" +
            "\nChange Log\n--------------------" +
            "\n!Ability to write the output to a txt file"+
            "\nipddump-0.1.1"+
            "\nDumped the recordId for SMS messages."+
            "\nIf no argument given, then the gui pops up"+
            "\nOnly *.ipd Files will get parsed now"+
            "\nWhen the parsing is complete, the total number of SMSs is dispalyed";

    /** Creates new form IpdDump */
    public IpdDump_WithGUI() {
        initComponents();
         ipdFileFilter f = new ipdFileFilter();
        //File location = new File(jarsLocation.getText());
        //jFileChooser1.setCurrentDirectory(location);
        jFileChooser1.setFileFilter(f);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        filebrowser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        outputFilefield = new javax.swing.JTextField();
        writeToTxt = new javax.swing.JButton();
        writeToXml = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IpdDump with GUI");

        filebrowser.setText("Choose an *.ipd file");
        jTextArea1.setText(thnx+chglog);
        filebrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filebrowserActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        outputFilefield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        outputFilefield.setText("Path and the name of the output file");
        outputFilefield.setEnabled(false);
        outputFilefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFilefieldActionPerformed(evt);
            }
        });

        writeToTxt.setEnabled(false);
        writeToTxt.setLabel("Write to txt");
        writeToTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeToTxtActionPerformed(evt);
            }
        });

        writeToXml.setText("Write to xml");
        writeToXml.setEnabled(false);
        writeToXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeToXmlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filebrowser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(writeToTxt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(writeToXml)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputFilefield, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filebrowser)
                    .addComponent(writeToTxt)
                    .addComponent(outputFilefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(writeToXml))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );

        writeToTxt.getAccessibleContext().setAccessibleName("Write to TXT");

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void filebrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filebrowserActionPerformed
       jTextArea1.setText(thnx+"\n\nWORKING...  be patient!");
        jFileChooser1.setMultiSelectionEnabled(false);

         if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(null)) {
             

              String path = jFileChooser1.getSelectedFile().getAbsolutePath().toString();
                int last = path.lastIndexOf('.');
                path= path.substring(0, last);

                pathString = path;
                outputFilefield.setText(pathString+".*");
             
             String[] args = {jFileChooser1.getSelectedFile().getPath()};
             System.out.println(args[0]);
             Main.main(args);

//            PrintStream ps = null ;
//            System.setErr(ps);



           
         string = org.quaternions.ipddump.Main.getSMStoString();
        
        //string = unicodeString.convert(string);

            try {

    // Create the encoder and decoder for ISO-8859-1
    Charset charset = Charset.forName("ISO-8859-1");
    CharsetDecoder decoder = charset.newDecoder();
    CharsetEncoder encoder = charset.newEncoder();

      // Convert a string to ISO-LATIN-1 bytes in a ByteBuffer
        // The new ByteBuffer is ready to be read.
        ByteBuffer bbuf = encoder.encode(CharBuffer.wrap("a string"));

        // Convert ISO-LATIN-1 bytes in a ByteBuffer to a character ByteBuffer and then to a string.
        // The new ByteBuffer is ready to be read.
        CharBuffer cbuf = decoder.decode(bbuf);
        String s = cbuf.toString();




    } catch (Exception e) {
        System.out.println(e.getMessage());
    }


            jTextArea1.setText("uid,       sent,      received,      sent?,       far number,      text\n");
            jTextArea1.append(string);
            jTextArea1.append("Total Number of SMS messages: "+String.valueOf(Main.getNumberOfSMS()));
            if (Main.getNumberOfSMS()!=0){
            writeToTxt.setEnabled(true);
            writeToXml.setEnabled(true);
            } else {
            writeToTxt.setEnabled(false);
            writeToXml.setEnabled(false);
            }
            
            
        }
         else jTextArea1.setText(thnx);

}//GEN-LAST:event_filebrowserActionPerformed

    private void outputFilefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFilefieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_outputFilefieldActionPerformed

    private void writeToTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeToTxtActionPerformed
    String x=pathString;
        Main.writeTxt(x,string);
}//GEN-LAST:event_writeToTxtActionPerformed

    private void writeToXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeToXmlActionPerformed
        String x=pathString;
        Main.writeXml(pathString, Main.db);    // TODO add your handling code here:
}//GEN-LAST:event_writeToXmlActionPerformed

    /**
    * @param args the command line arguments
    */
//    public static void main(String args[]) {
//
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//
//                new IpdDump_WithGUI().setVisible(true);
//
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filebrowser;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField outputFilefield;
    private javax.swing.JButton writeToTxt;
    private javax.swing.JButton writeToXml;
    // End of variables declaration//GEN-END:variables

 

}
